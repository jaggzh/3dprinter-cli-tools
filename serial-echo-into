#!/bin/bash
# This script monitors the printer temperature.
# ...setting its temp before starting if desired, given on commandline
# Options:
#   tempC
#   -1       only output temperature one time, and to stdout
#   -h       help
#   -t #     delay (seconds) between monitoring (default is 5s)
#   -w       loop until the printer temperature reaches the set
#            temperature and exit, (monitoring and displaying until
#            done).
#   -T #     loop until this amount of seconds have passed,
#            (monitoring and displaying until done).
#
# Installation: 1. Make a `printer-device` script that outputs the dev
#                  of your printer OR set your dev directly below.
#                  * You can also pass it your /dev/blah as an option
#               2. Set your baud below
# NOTES:
# * Many printer contollers apparently reset when USB/serial is
#   connected, so the printer outputs a bunch of stuff at that time.
#   We have to read their welcome message.

baud=115200
dev="$(printer-device)"

# Parse options
temp_only_once=false
wait_time=5
temp_set=false
temp_value=0
wait_for_temp=false
time_limit=0

while getopts ":1ht:wT:" opt; do
    case ${opt} in
        1) temp_only_once=true; ;;
        h)
            echo "This script monitors the printer temperature."
            echo "Options:"
            echo "  tempC"
            echo "  -1       only output temperature one time, and to stdout"
            echo "  -h       help"
            echo "  -t #     delay (seconds) between monitoring (default is 5s)"
            echo "  -w       loop until the printer temperature reaches the set temperature and exit, (monitoring and displaying until done)."
            echo "  -T #     loop until this amount of seconds have passed, (monitoring and displaying until done)."
            exit 0
            ;;
        t) wait_time=${OPTARG}; ;;
        w) wait_for_temp=true; ;;
        T) time_limit=${OPTARG}; ;;
        \?) echo "Invalid option: -${OPTARG}" 1>&2; exit 1; ;;
        :)  echo "Option -${OPTARG} requires an argument." 1>&2;
            exit 1;
            ;;
    esac
done
shift $((OPTIND -1))

if [[ "$#" -gt 0 ]]; then dev="$1"; shift; fi
if [[ "$#" -gt 0 ]]; then temp_value="$1"; temp_set=true; shift; fi

echo "Device: $dev" >&2
echo "Wait time: $wait_time" >&2
if $temp_set; then echo "Set temp: $temp_value" >&2; fi
if $wait_for_temp; then echo "Wait for set temp: $wait_for_temp" >&2; fi
if [[ $time_limit -gt 0 ]]; then echo "Time limit: $time_limit" >&2; fi

# This line isn't needed if your dev is already stty'ed
# ...we'll assume it's not set.
stty speed "$baud" time 5 ignbrk -brkint -icrnl -imaxbel -opost -onlcr -isig -icanon -iexten -echo -echoe -echok -echoctl -echoke -F "$dev" >/dev/null

exec 4<> "$dev"

# Read welcome message
timeout=3 # Initial wait
while read -t $timeout -r welcome <&4; do
    printf 'Welcome: %s\n' "$welcome" >&2
    timeout=.1
done

# Check if read timed out
if [ $? -ne 0 ]; then
    echo "Read timed out, assuming end of welcome message" >&2
else
	echo "End of welcome message" >&2
fi

# Set the temperature if specified
if $temp_set; then
    printf 'M104 S%d\n' "$temp_value" >&4
fi
cmd_gettemp="M105"

# Now read/write to the device
start_time=$(date +%s)
while read -r uline; do
    printf '> %s\n' "$uline" >&2
    printf '%s\n' "$uline" >&4
    for ((i=0; i<20; i++)); do
        read -t 0.1 devline <&4
        printf '< %s\n' "$devline" >&2
        # Check the current temperature
        if [[ "$devline" =~ T:([0-9\.]+) ]]; then
            cur_temp=${BASH_REMATCH[1]}
            echo "Current temperature: $cur_temp" >&2
            # Check if we should exit because the temperature has been reached
            if $wait_for_temp && (( $(echo "$cur_temp >= $temp_value" | bc -l) )); then
                echo "Target temperature reached" >&2
                exit 0
            fi
        fi
        # Check if we should exit because the time limit has been reached
        if [[ $time_limit -gt 0 && $(($(date +%s) - start_time)) -ge $time_limit ]]; then
            echo "Time limit reached" >&2
            exit 0
        fi
        sleep "$wait_time"
    done
    # Check if we should only output the temperature once
    if $temp_only_once; then
        exit 0
    fi
done
